name: GoodPeople-BE Deploy to EC2

on:
  push:
    branches: [ deploy ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # SSH 연결 위해 Security Group에 깃허브 액션 Public IP 추가
      - name: GitHub Action Runner Public IP
        id: ip
        uses: haythem/public-ip@v1.3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add GitHub Action IP to SG
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 || echo "The IP already exists in the security group"
      
      # JAR 업로드
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/goodpeople-0.0.1-SNAPSHOT.jar"
          target: "~/deploy"
      
      # FastAPI 업로드
      - name: Upload FastAPI server to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "fastapi"
          target: "~"

      # 실행 중인 JAR 종료
      # continue-on-error 옵션으로 강제 성공 처리
      - name: Kill existing JAR on EC2
        uses: appleboy/ssh-action@v0.1.8
        continue-on-error: true
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Killing existing JAR if running..."
            if pgrep -f 'goodpeople-0.0.1-SNAPSHOT.jar'; then
              echo "Found running process, attempting to kill..."
              pkill -f 'goodpeople-0.0.1-SNAPSHOT.jar' || echo "Kill failed, but continuing..."
            else
              echo "No running process found, nothing to kill."
            fi

      # 업로드 한 JAR 실행
      - name: Run JAR on EC2
        uses: appleboy/ssh-action@v0.1.8
        continue-on-error: true
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          # command_timeout: "10m"
          script: |
            echo "Starting new JAR..."

            # JAR 존재하지 않으면 종료
            cd ~/deploy/build/libs
            if [ ! -f goodpeople-0.0.1-SNAPSHOT.jar ]; then
              echo "JAR Not Exists"
              ls -lh
              exit 1
            fi

            # 권한 부여
            chmod +x goodpeople-0.0.1-SNAPSHOT.jar

            # 실행
            nohup java -jar goodpeople-0.0.1-SNAPSHOT.jar > app.log 2>&1 &

            # PID Log
            JAVA_PID=$!
            echo "Started Java process with PID: $JAVA_PID"
            
            # 실행 중인 프로세스 확인
            echo "Running processes:"
            pgrep -fl java || echo "No java process running."
            
            # 로그 출력
            echo "Recent log output:"
            tail -n 10 app.log || echo "app.log not found"

      # 실행 중인 FastAPI 서버 종료
      - name: Kill existing FastAPI server on EC2
        uses: appleboy/ssh-action@v0.1.8
        continue-on-error: true
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Killing existing FastAPI..."
            pkill -f "uvicorn" || true

      # 캐싱
      - name: Create Python cache
        uses: appleboy/ssh-action@v0.1.8
        with: 
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Preparing cache..."
            bash -lc 'cd ~/fastapi && source ~/myenv/bin/activate python3.8 prepare_law_cache.py'
      
      # FastAPI 서버 실행
      - name: Run FastAPI server on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Bash 로그인 쉘에서 직접 실행
            echo "Activating env and restarting FastAPI..."
            bash -lc 'cd ~/fastapi && nohup ~/myenv/bin/uvicorn app:app --host 0.0.0.0 --port 8000 
            > ~/fastapi/fastapi.log 2>&1 < /dev/null &'

            # Debug: timeout 문제 해결. 위의 /dev/null & 포함
            exit 0

      # Delete GitHub SSH IP
      - name: Revoke GitHub Actions IP from SG
        if: always()
        run: |
          echo "🧼 Revoking IP ${{ steps.ip.outputs.ipv4 }}/32 from security group"
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 || echo "IP not found, nothing to revoke"
