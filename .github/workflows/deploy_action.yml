name: GoodPeople-BE Deploy to EC2

on:
  push:
    branches: [ deploy ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Process: Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Process: Add GitHub Action IP to SG
      - name: GitHub Action Runner Public IP
        id: ip
        uses: haythem/public-ip@v1.3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add GitHub Action IP to SG
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 
          || echo "The IP already exists in the security group"
      
      # Process: Upload JAR to AWS EC2
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*.jar"
          target: "~/deploy"

      - name: Run JAR on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Killing existing JAR if running..."
            pkill -f 'java.*.jar' || true
            echo "Starting new JAR..."
            cd ~/deploy
            nohup java -jar *.jar > app.log 2>&1 &

      # Delete GitHub SSH IP
      - name: Revoke GitHub Actions IP from SG
        if: always()
        run: |
          echo "ðŸ§¼ Revoking IP ${{ steps.ip.outputs.ipv4 }}/32 from security group"
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 \
          || echo "IP not found, nothing to revoke"
